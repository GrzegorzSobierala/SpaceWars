//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Data/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game.Input.System
{
    public partial class @PlayerControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""de16721d-897f-4043-aa58-988a9659ff13"",
            ""actions"": [
                {
                    ""name"": ""MoveForward"",
                    ""type"": ""Button"",
                    ""id"": ""6316b378-8594-4e1f-b03e-f7a9c38693a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveBack"",
                    ""type"": ""Button"",
                    ""id"": ""20eff29e-f1a6-4875-aa51-2c40647f6b15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""11db2728-458c-4427-a281-0d2050e3df6e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""04d762e5-bd7a-4074-94c1-3443faf6eca2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""c9353716-207e-439d-821c-610128e271ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CursorPosition"",
                    ""type"": ""Value"",
                    ""id"": ""9296817a-c332-4b5a-a82a-594c707e1707"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""843481e7-d196-4de1-a673-a49d93695a07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchGun"",
                    ""type"": ""Button"",
                    ""id"": ""195038b8-ca0e-474f-aea7-de8b44f8ecee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateLeft"",
                    ""type"": ""Button"",
                    ""id"": ""a8a093b1-6ad6-4296-b3a9-b31b9979b7c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateRight"",
                    ""type"": ""Button"",
                    ""id"": ""6d7b475d-4bff-4c44-9142-91cf6e8f7999"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwapSteering"",
                    ""type"": ""Button"",
                    ""id"": ""210137a4-ca57-4948-bd15-475873db803c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleAim"",
                    ""type"": ""Button"",
                    ""id"": ""a7dc14aa-0d3e-46ef-9e88-7578275e1998"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleSwapSteeringOnAim"",
                    ""type"": ""Button"",
                    ""id"": ""e6cd829d-eec8-4ede-a5dc-188e0e638dff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d8019a4f-9d1e-4827-a190-8eef6d06a675"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb048088-9b79-4c0a-bf2d-0ff07f167e43"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf619614-df66-4a89-88d5-d137967c11c0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79b5d443-619d-4a15-a7f0-77c82496dc98"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4bb321e-02b7-4126-abde-09ee4a117bfc"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CursorPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db7baff3-b6d4-4d16-ac57-41e31c155ee3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f60996cc-deb5-41fd-bd72-eb3d00f3e4d6"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchGun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93b70a0d-1ba5-4d80-af21-c1da79f954b1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f295a38e-5bde-4ee8-b8f6-3319df00ab34"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f77cde4-5251-4d19-8261-ec1ef5303c14"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""468d1c41-fbb5-4006-866e-c30e84dda251"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwapSteering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1160060f-2d6a-4516-94ff-3da1f26b66af"",
                    ""path"": ""<Keyboard>/9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleAim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9b049c3-c12c-43e5-a01c-f6b88d4e2e44"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleSwapSteeringOnAim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Ui"",
            ""id"": ""6a5d5995-9858-4e32-9f36-dfc3f00f8b75"",
            ""actions"": [
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""50fe0b21-e07b-4ae3-b9bd-c867755aa855"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e16489ac-04c4-4781-a032-4734a5e017e4"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dialogues"",
            ""id"": ""22d1bc6b-183f-4b71-98c5-7dba1ee2664c"",
            ""actions"": [
                {
                    ""name"": ""Skip"",
                    ""type"": ""Button"",
                    ""id"": ""3600a2fc-c02b-47a0-be74-a56074aab835"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1fb58146-67fd-4383-9805-7e78fbf42f38"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de44f8ec-4c73-4484-b94f-be6b6813113d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""728974de-e535-4bdd-ad5b-d4877a0e2c44"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Gameplay
            m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
            m_Gameplay_MoveForward = m_Gameplay.FindAction("MoveForward", throwIfNotFound: true);
            m_Gameplay_MoveBack = m_Gameplay.FindAction("MoveBack", throwIfNotFound: true);
            m_Gameplay_MoveLeft = m_Gameplay.FindAction("MoveLeft", throwIfNotFound: true);
            m_Gameplay_MoveRight = m_Gameplay.FindAction("MoveRight", throwIfNotFound: true);
            m_Gameplay_Boost = m_Gameplay.FindAction("Boost", throwIfNotFound: true);
            m_Gameplay_CursorPosition = m_Gameplay.FindAction("CursorPosition", throwIfNotFound: true);
            m_Gameplay_Shoot = m_Gameplay.FindAction("Shoot", throwIfNotFound: true);
            m_Gameplay_SwitchGun = m_Gameplay.FindAction("SwitchGun", throwIfNotFound: true);
            m_Gameplay_RotateLeft = m_Gameplay.FindAction("RotateLeft", throwIfNotFound: true);
            m_Gameplay_RotateRight = m_Gameplay.FindAction("RotateRight", throwIfNotFound: true);
            m_Gameplay_SwapSteering = m_Gameplay.FindAction("SwapSteering", throwIfNotFound: true);
            m_Gameplay_ToggleAim = m_Gameplay.FindAction("ToggleAim", throwIfNotFound: true);
            m_Gameplay_ToggleSwapSteeringOnAim = m_Gameplay.FindAction("ToggleSwapSteeringOnAim", throwIfNotFound: true);
            // Ui
            m_Ui = asset.FindActionMap("Ui", throwIfNotFound: true);
            m_Ui_Back = m_Ui.FindAction("Back", throwIfNotFound: true);
            // Dialogues
            m_Dialogues = asset.FindActionMap("Dialogues", throwIfNotFound: true);
            m_Dialogues_Skip = m_Dialogues.FindAction("Skip", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Gameplay
        private readonly InputActionMap m_Gameplay;
        private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
        private readonly InputAction m_Gameplay_MoveForward;
        private readonly InputAction m_Gameplay_MoveBack;
        private readonly InputAction m_Gameplay_MoveLeft;
        private readonly InputAction m_Gameplay_MoveRight;
        private readonly InputAction m_Gameplay_Boost;
        private readonly InputAction m_Gameplay_CursorPosition;
        private readonly InputAction m_Gameplay_Shoot;
        private readonly InputAction m_Gameplay_SwitchGun;
        private readonly InputAction m_Gameplay_RotateLeft;
        private readonly InputAction m_Gameplay_RotateRight;
        private readonly InputAction m_Gameplay_SwapSteering;
        private readonly InputAction m_Gameplay_ToggleAim;
        private readonly InputAction m_Gameplay_ToggleSwapSteeringOnAim;
        public struct GameplayActions
        {
            private @PlayerControls m_Wrapper;
            public GameplayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveForward => m_Wrapper.m_Gameplay_MoveForward;
            public InputAction @MoveBack => m_Wrapper.m_Gameplay_MoveBack;
            public InputAction @MoveLeft => m_Wrapper.m_Gameplay_MoveLeft;
            public InputAction @MoveRight => m_Wrapper.m_Gameplay_MoveRight;
            public InputAction @Boost => m_Wrapper.m_Gameplay_Boost;
            public InputAction @CursorPosition => m_Wrapper.m_Gameplay_CursorPosition;
            public InputAction @Shoot => m_Wrapper.m_Gameplay_Shoot;
            public InputAction @SwitchGun => m_Wrapper.m_Gameplay_SwitchGun;
            public InputAction @RotateLeft => m_Wrapper.m_Gameplay_RotateLeft;
            public InputAction @RotateRight => m_Wrapper.m_Gameplay_RotateRight;
            public InputAction @SwapSteering => m_Wrapper.m_Gameplay_SwapSteering;
            public InputAction @ToggleAim => m_Wrapper.m_Gameplay_ToggleAim;
            public InputAction @ToggleSwapSteeringOnAim => m_Wrapper.m_Gameplay_ToggleSwapSteeringOnAim;
            public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
            public void AddCallbacks(IGameplayActions instance)
            {
                if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
                @MoveForward.started += instance.OnMoveForward;
                @MoveForward.performed += instance.OnMoveForward;
                @MoveForward.canceled += instance.OnMoveForward;
                @MoveBack.started += instance.OnMoveBack;
                @MoveBack.performed += instance.OnMoveBack;
                @MoveBack.canceled += instance.OnMoveBack;
                @MoveLeft.started += instance.OnMoveLeft;
                @MoveLeft.performed += instance.OnMoveLeft;
                @MoveLeft.canceled += instance.OnMoveLeft;
                @MoveRight.started += instance.OnMoveRight;
                @MoveRight.performed += instance.OnMoveRight;
                @MoveRight.canceled += instance.OnMoveRight;
                @Boost.started += instance.OnBoost;
                @Boost.performed += instance.OnBoost;
                @Boost.canceled += instance.OnBoost;
                @CursorPosition.started += instance.OnCursorPosition;
                @CursorPosition.performed += instance.OnCursorPosition;
                @CursorPosition.canceled += instance.OnCursorPosition;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @SwitchGun.started += instance.OnSwitchGun;
                @SwitchGun.performed += instance.OnSwitchGun;
                @SwitchGun.canceled += instance.OnSwitchGun;
                @RotateLeft.started += instance.OnRotateLeft;
                @RotateLeft.performed += instance.OnRotateLeft;
                @RotateLeft.canceled += instance.OnRotateLeft;
                @RotateRight.started += instance.OnRotateRight;
                @RotateRight.performed += instance.OnRotateRight;
                @RotateRight.canceled += instance.OnRotateRight;
                @SwapSteering.started += instance.OnSwapSteering;
                @SwapSteering.performed += instance.OnSwapSteering;
                @SwapSteering.canceled += instance.OnSwapSteering;
                @ToggleAim.started += instance.OnToggleAim;
                @ToggleAim.performed += instance.OnToggleAim;
                @ToggleAim.canceled += instance.OnToggleAim;
                @ToggleSwapSteeringOnAim.started += instance.OnToggleSwapSteeringOnAim;
                @ToggleSwapSteeringOnAim.performed += instance.OnToggleSwapSteeringOnAim;
                @ToggleSwapSteeringOnAim.canceled += instance.OnToggleSwapSteeringOnAim;
            }

            private void UnregisterCallbacks(IGameplayActions instance)
            {
                @MoveForward.started -= instance.OnMoveForward;
                @MoveForward.performed -= instance.OnMoveForward;
                @MoveForward.canceled -= instance.OnMoveForward;
                @MoveBack.started -= instance.OnMoveBack;
                @MoveBack.performed -= instance.OnMoveBack;
                @MoveBack.canceled -= instance.OnMoveBack;
                @MoveLeft.started -= instance.OnMoveLeft;
                @MoveLeft.performed -= instance.OnMoveLeft;
                @MoveLeft.canceled -= instance.OnMoveLeft;
                @MoveRight.started -= instance.OnMoveRight;
                @MoveRight.performed -= instance.OnMoveRight;
                @MoveRight.canceled -= instance.OnMoveRight;
                @Boost.started -= instance.OnBoost;
                @Boost.performed -= instance.OnBoost;
                @Boost.canceled -= instance.OnBoost;
                @CursorPosition.started -= instance.OnCursorPosition;
                @CursorPosition.performed -= instance.OnCursorPosition;
                @CursorPosition.canceled -= instance.OnCursorPosition;
                @Shoot.started -= instance.OnShoot;
                @Shoot.performed -= instance.OnShoot;
                @Shoot.canceled -= instance.OnShoot;
                @SwitchGun.started -= instance.OnSwitchGun;
                @SwitchGun.performed -= instance.OnSwitchGun;
                @SwitchGun.canceled -= instance.OnSwitchGun;
                @RotateLeft.started -= instance.OnRotateLeft;
                @RotateLeft.performed -= instance.OnRotateLeft;
                @RotateLeft.canceled -= instance.OnRotateLeft;
                @RotateRight.started -= instance.OnRotateRight;
                @RotateRight.performed -= instance.OnRotateRight;
                @RotateRight.canceled -= instance.OnRotateRight;
                @SwapSteering.started -= instance.OnSwapSteering;
                @SwapSteering.performed -= instance.OnSwapSteering;
                @SwapSteering.canceled -= instance.OnSwapSteering;
                @ToggleAim.started -= instance.OnToggleAim;
                @ToggleAim.performed -= instance.OnToggleAim;
                @ToggleAim.canceled -= instance.OnToggleAim;
                @ToggleSwapSteeringOnAim.started -= instance.OnToggleSwapSteeringOnAim;
                @ToggleSwapSteeringOnAim.performed -= instance.OnToggleSwapSteeringOnAim;
                @ToggleSwapSteeringOnAim.canceled -= instance.OnToggleSwapSteeringOnAim;
            }

            public void RemoveCallbacks(IGameplayActions instance)
            {
                if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGameplayActions instance)
            {
                foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GameplayActions @Gameplay => new GameplayActions(this);

        // Ui
        private readonly InputActionMap m_Ui;
        private List<IUiActions> m_UiActionsCallbackInterfaces = new List<IUiActions>();
        private readonly InputAction m_Ui_Back;
        public struct UiActions
        {
            private @PlayerControls m_Wrapper;
            public UiActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Back => m_Wrapper.m_Ui_Back;
            public InputActionMap Get() { return m_Wrapper.m_Ui; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UiActions set) { return set.Get(); }
            public void AddCallbacks(IUiActions instance)
            {
                if (instance == null || m_Wrapper.m_UiActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UiActionsCallbackInterfaces.Add(instance);
                @Back.started += instance.OnBack;
                @Back.performed += instance.OnBack;
                @Back.canceled += instance.OnBack;
            }

            private void UnregisterCallbacks(IUiActions instance)
            {
                @Back.started -= instance.OnBack;
                @Back.performed -= instance.OnBack;
                @Back.canceled -= instance.OnBack;
            }

            public void RemoveCallbacks(IUiActions instance)
            {
                if (m_Wrapper.m_UiActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUiActions instance)
            {
                foreach (var item in m_Wrapper.m_UiActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UiActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UiActions @Ui => new UiActions(this);

        // Dialogues
        private readonly InputActionMap m_Dialogues;
        private List<IDialoguesActions> m_DialoguesActionsCallbackInterfaces = new List<IDialoguesActions>();
        private readonly InputAction m_Dialogues_Skip;
        public struct DialoguesActions
        {
            private @PlayerControls m_Wrapper;
            public DialoguesActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Skip => m_Wrapper.m_Dialogues_Skip;
            public InputActionMap Get() { return m_Wrapper.m_Dialogues; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DialoguesActions set) { return set.Get(); }
            public void AddCallbacks(IDialoguesActions instance)
            {
                if (instance == null || m_Wrapper.m_DialoguesActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_DialoguesActionsCallbackInterfaces.Add(instance);
                @Skip.started += instance.OnSkip;
                @Skip.performed += instance.OnSkip;
                @Skip.canceled += instance.OnSkip;
            }

            private void UnregisterCallbacks(IDialoguesActions instance)
            {
                @Skip.started -= instance.OnSkip;
                @Skip.performed -= instance.OnSkip;
                @Skip.canceled -= instance.OnSkip;
            }

            public void RemoveCallbacks(IDialoguesActions instance)
            {
                if (m_Wrapper.m_DialoguesActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IDialoguesActions instance)
            {
                foreach (var item in m_Wrapper.m_DialoguesActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_DialoguesActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public DialoguesActions @Dialogues => new DialoguesActions(this);
        public interface IGameplayActions
        {
            void OnMoveForward(InputAction.CallbackContext context);
            void OnMoveBack(InputAction.CallbackContext context);
            void OnMoveLeft(InputAction.CallbackContext context);
            void OnMoveRight(InputAction.CallbackContext context);
            void OnBoost(InputAction.CallbackContext context);
            void OnCursorPosition(InputAction.CallbackContext context);
            void OnShoot(InputAction.CallbackContext context);
            void OnSwitchGun(InputAction.CallbackContext context);
            void OnRotateLeft(InputAction.CallbackContext context);
            void OnRotateRight(InputAction.CallbackContext context);
            void OnSwapSteering(InputAction.CallbackContext context);
            void OnToggleAim(InputAction.CallbackContext context);
            void OnToggleSwapSteeringOnAim(InputAction.CallbackContext context);
        }
        public interface IUiActions
        {
            void OnBack(InputAction.CallbackContext context);
        }
        public interface IDialoguesActions
        {
            void OnSkip(InputAction.CallbackContext context);
        }
    }
}
